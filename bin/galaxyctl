#!/usr/bin/env python
"""
ELIXIR-ITALY
IBIOM-CNR

Contributors:
author: Tangaro Marco
email: ma.tangaro@ibiom.cnr.it
"""

# Imports
import sys, os
import time
import argparse

# Custom libraries
from galaxyctl import __version__
from galaxyctl import DetectGalaxyCommands
from galaxyctl import UwsgiSocket
from galaxyctl import UwsgiStatsServer

from galaxyctl import find_ini_file
galaxyctl_config_file = find_ini_file('galaxyctl.ini')

# read /etc/galaxyctl/galaxyctl.ini configuration file
from  galaxyctl import read_ini_file
init_system = read_ini_file(galaxyctl_config_file, 'galaxy', 'init_system')
supervisord_conf_file = read_ini_file(galaxyctl_config_file, 'galaxy', 'supervisord_conf_file')

# Load configuration files
galaxy_config_file = read_ini_file(galaxyctl_config_file, 'galaxy', 'galaxy_config_file')
uwsgi_pid_file = read_ini_file(galaxyctl_config_file, 'galaxy', 'uwsgi_pid_file')

# Logging
from galaxyctl import set_log
logs = set_log()

#______________________________________
def cli_options():
  parser = argparse.ArgumentParser(description='Galaxy Central Management Tool script')
  parser.add_argument('action', choices=['start','stop','restart','startup','status'], nargs='?', help='Action')
  parser.add_argument('module', choices=['galaxy'], nargs='?', help='Load module')
  parser.add_argument('-f', '--force', action='store_true', dest='force', default=False, help='Force Galaxy to start')
  parser.add_argument('-r', '--retry', dest='n_retries', default=5, type=int, help='Number of retries restart')
  parser.add_argument('-c', '--config-file', dest='config_file', help='uWSGI ini file')
  parser.add_argument('-t', '--timeout', dest='timeout', default=300, help='Wait timeout')
  parser.add_argument('-V', '--version', action='store_true', dest='version', default=False, help='Print galaxyctl_libs version')
  return parser.parse_args()

#______________________________________
# Galaxy startup: Wait galaxy to start and restart Galaxy 5 times before error.
def startup_galaxy(ini_file='/home/galaxy/galaxy/config/galaxy.ini', wait_time=600, n_retries=5):
 
  cmd = DetectGalaxyCommands(init_system)
  logs.debug('[galaxyctl] %s' % cmd.get_startup_command())
  os.system(cmd.get_startup_command())
 
  # Wait supervisord start
  time.sleep(10)

  # Check uWSGI workers
  workers_check = galaxy_workers_check(ini_file, wait_time)

  # Force restart if all workers busy
  if workers_check is True:
    print 'Galaxy start: [ OK ]'
    return
  elif workers_check is False:
    galaxy_startup_check(ini_file, wait_time, n_retries)
  else:
    sys.exit('[Error] Start failed. Check log files: [ FAIL ]')

#______________________________________
def stop_galaxy(ini_file='/home/galaxy/galaxy/config/galaxy.ini', force_proc=False):

  logs.debug('[galaxyctl] Stop Galaxy')

  stats = UwsgiStatsServer(timeout=5, fname=ini_file)
  busy_list = stats.GetBusyList()

  cmd = DetectGalaxyCommands(init_system)
  logs.debug('[galaxyctl] %s' % cmd.get_stop_command())
  os.system(cmd.get_stop_command())

  # kill workers if still alive
  if busy_list:
    logs.debug('[galaxyctl] Busy list: %s' % str(busy_list))
    for pid in busy_list:
      if check_pid(pid) is True:
        logs.debug('[galaxyctl] Killing workers: %s' % str(pid))
        os.kill(pid,9)

  if force_proc is True:
    kill_uwsgi_master()

  print 'Galaxy stop: [ OK ]'

#______________________________________
# kill uWSGI master process if still alive
# solve uWSGI abnormal termination and fatal error
def kill_uwsgi_master():
  logs.debug('[galaxyctl] Check uWSGI master process.')

  master_pid, stderr, status = UwsgiSocket(fname=galaxy_config_file).get_uwsgi_master_pid()

  if status == 0:
    for pid in master_pid.splitlines():
      logs.debug('[galaxyctl] uWSGI still alive: PID %s. Killing...'  % pid)
      os.kill(int(pid),9)
  else:
    logs.debug('[galaxyctl] uWSGI master process already closed.')

#______________________________________
# Check For the existence of a unix pid.
def check_pid(pid):
    if pid < 0:
      return False
    try:
        os.kill(pid, 0)
    except OSError:
        return False
    else:
        return True

#_____________________________________
# Check if pid file exists
def check_proc(pidfile):
  if os.path.isfile(pidfile):
    stats_pid = open(pidfile)
    pid = int(stats_pid.read())
    if pid > 0:
      if check_pid(pid):
        stats_pid.close()
        return pid
      else:
        return False
    return False
  return False

#_____________________________________
# Start Galaxy
# ini_file: path to galaxy.ini file
# wait_time: uWSGI stats server waiting time. Currently the script wait the stats server for 300 secs.
# force_proc: if forced to start the script restart galaxy until at least 1 uwgi worker is accepting requests
# n_retries: number of tentative restart.

def start_galaxy(ini_file='/home/galaxy/galaxy/config/galaxy.ini', wait_time=300, force_proc=False, n_retries=5):

  logs.debug('[galaxyctl] Start Galaxy')

  cmd = DetectGalaxyCommands(init_system)
  logs.debug('[galaxyctl] %s' % cmd.get_start_command())
  os.system(cmd.get_start_command())

  # Wait Galaxy start
  workers_check = galaxy_workers_check(ini_file, wait_time)

  if workers_check is True:
    print 'Galaxy start: [ OK ]'
    return
  elif workers_check is False and force_proc is True:
    # Try to restart Galaxy 5 times before error
    galaxy_startup_check(ini_file, wait_time, n_retries)
  else:
    sys.exit('[Error] Start failed. Check log files: [ FAIL ]')

#______________________________________
# Check uWSGI workers 5 times before error

def galaxy_workers_check(ini_file='/home/galaxy/galaxy/config/galaxy.ini', wait_time=300):

  logs.debug('[galaxyctl] UWSGI workers check')

  # Wait Galaxy start
  stats = UwsgiStatsServer(timeout=wait_time, fname=ini_file)
  socket = stats.GetUwsgiStatsServer()
  if socket is False:
    return False
  else:
    socket.close()

  # Wait workers accepting requests
  time.sleep(5)

  status = False
  status = stats.CheckUwsgiWorkers(ini_file)

  if status is True:
    return True

  # check workers 5 times before raise error
  retries = 0
  while status is False:
    logs.debug('[galaxyctl] UWSGI workers retry: %s' % str(retries))
    time.sleep(2)
    status = stats.CheckUwsgiWorkers(ini_file)
    retries += 1
    if status is True:
      print '[ OK ]'
      return True
    if retries == 5:
      return False

#______________________________________
# This function check if uWSGI workers are accepting requests, otherwise restart Galaxy 
def galaxy_startup_check(ini_file='/home/galaxy/galaxy/config/galaxy.ini', wait_time=300, n_retries=5):

  logs.debug('[galaxyctl] Galaxy workers check with forced restart if all workers busy.')
  logs.debug('[galaxyctl] Overall retries number: %s' % n_retries)

  stats = UwsgiStatsServer(timeout=wait_time, fname=ini_file)
  server = stats.GetUwsgiStatsServer()

  status = False
  retries = 0
  status = stats.CheckUwsgiWorkers(ini_file)
  while status is False:
    time.sleep(5) # pause to let workers accept requests
    logs.debug('[galaxyctl] Galaxy restart retry %s of %s' % (str(retries), str(n_retries)))
    busy_list = stats.GetBusyList()
    galaxy_startup_check_restart(busy_list)
    status = stats.CheckUwsgiWorkers(ini_file)
    retries += 1
    if status is True:
      break
    if retries == n_retries:
      sys.exit('[Error] Start failed. Check log files: [ FAIL ]')

#______________________________________
# Restart command for galaxy startup.
# It is used also when galaxy is forced to start using '--force' option.
# uWSGI not-accepting workers are killed
# if not correctly closed, the uwsgi master process is killed, too.
def galaxy_startup_check_restart(busy_list):

  cmd = DetectGalaxyCommands(init_system)

  logs.debug('[galaxyctl] %s' % cmd.get_stop_command())
  os.system(cmd.get_stop_command())

  if busy_list:
    print busy_list
    for pid in busy_list:
      if check_pid(pid) is True:
        os.kill(pid,9)

  # kill uwsgi master process if still alive
  kill_uwsgi_master()

  logs.debug('[galaxyctl] %s' % cmd.get_start_command())
  os.system(cmd.get_start_command())

#______________________________________
def restart_galaxy(ini_file='/home/galaxy/galaxy/config/galaxy.ini', wait_time=300, force_proc=False, n_retries=5):
  
  logs.debug('[galaxyctl] Restart Galaxy')

  stop_galaxy(ini_file, force_proc)

  start_galaxy(ini_file, wait_time, force_proc, n_retries)

#______________________________________
def status_galaxy():
  cmd = DetectGalaxyCommands(init_system)
  logs.debug('[galaxyctl] %s' % cmd.get_status_command())
  os.system(cmd.get_status_command())

#______________________________________
def galaxyctl():

  options = cli_options()

  if options.version is True:
    print('Galaxyctl library: ' + __version__)
    return

  if not os.geteuid() == 0:
    sys.exit('[Error] Script must be run as root.')

  # Replace galaxy_config_file if needed
  if options.config_file:
    global galaxy_config_file
    galaxy_config_file = options.config_file

  # Timeout needs to be float. We cast it here!
  # We cannot declare it as float using argparse default type otherwise we loose the possibility to set it to None!
  if options.timeout is not None:
    options.timeout = float(options.timeout)

  if options.module == 'galaxy': 

    if options.action == 'startup':
      startup_galaxy(galaxy_config_file, options.timeout)

    elif options.action == 'stop':
      print 'Stopping Galaxy: '
      stop_galaxy(galaxy_config_file, options.force)

    elif options.action == 'start':
      print 'Starting Galaxy: '
      start_galaxy( galaxy_config_file, options.timeout, options.force, options.n_retries )

    elif options.action == 'restart':
      print 'Restarting Galaxy:'
      restart_galaxy( galaxy_config_file, options.timeout, options.force, options.n_retries )

    elif options.action == 'status':
      status_galaxy()

    else:
      argparse.ArgumentParser().error("Invalid choice (choose from 'start', 'stop', 'restart', 'startup', 'status')")

  else: argparse.ArgumentParser().error("Invalid choice (only galaxy is currently supported)")

#______________________________________
if __name__ == '__main__':
  galaxyctl()
